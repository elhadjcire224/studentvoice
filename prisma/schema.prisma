// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// application database

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String
    verified      Boolean    @default(true)
    banned        Boolean    @default(false)
    isInstructor  Boolean    @default(false)
    admin         Boolean    @default(false)
    ip            String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    subjectId     String
    subject       Subject?   @relation(fields: [subjectId], references: [id], onDelete: NoAction)
    campagnes     Campagne[]
    likes         Like[]
    critiques     Critique[]
}

model Campagne {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    status    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Critique {
    id         String   @id @default(cuid())
    userId     String
    campagneId String
    signaled   Boolean  @default(false)
    rate       Int
    content    String   @db.Text
    shadowed   Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes      Like[]
}

model Like {
    id         String   @id @default(cuid())
    userId     String
    critiqueId String
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    critique   Critique @relation(fields: [critiqueId], references: [id], onDelete: Cascade)
}

model Subject {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User[]
}

model Contact {
    id        String   @id @default(cuid())
    userId    String?
    content   String   @db.Text
    createdAt DateTime @default(now())
}
